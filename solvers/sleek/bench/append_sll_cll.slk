data node {
  node next;
}.

pred lseg<p:node> == emp & self=p or
  (exists p_21,q_20: self::node<q_20> * q_20::lseg<p_21> & p_21=p)
  inv true.

pred ll<> == emp & self=null or
  (exists q_22: self::node<q_22> * q_22::ll<>)
  inv true.

pred clist<> == (exists self_19,p_18: 
  self::node<p_18> * p_18::lseg<self_19> & self_19=self)
  inv self!=null.

pred ll_e1<> == (exists q: self::node<q> * q::ll<>).

pred ll_e2<> == (exists p,q: self::node<p> * q::ll<> & p=q).

pred node_e1<q> == (exists p: self::node<p> & p=q).

pred lseg_e1<p> == (exists q: self::lseg<p> & p=q).
 
// (1) id: 1; line: 21; kind: BIND
 checkentail_exact x'::ll_e1<>&x'=x & y'=y & x!=null
 |-  x'::ll_e2<> & x'=x & y'=y & x!=null.
expect Valid.

// (2) id: 3; line: 21; kind: PRE
 checkentail_exact q::ll<> * x'::node<q>&v'=null & v'=q & x'=x & y'=y & x!=null
 |-  q::ll<> * x'::node<q>&v'=null & v'=q & x'=x & y'=y & x!=null.
expect Valid.
 
// (3) id: 5; line: 21; kind: PRE
 checkentail_exact q::ll<> * x'::node<q>&v'!=null & v'=q & x'=x & y'=y & x!=null
 |-  q::ll<> * x'::node<q>&v'!=null & v'=q & x'=x & y'=y & x!=null.
expect Valid.


// (4) id: 7; line: 22; kind: BIND
 checkentail_exact q::ll<> * x'::node<q>&v' & q!=null & x'=x & y'=y & x!=null
 |-  x'::node_e1<q> * q::ll<>& v' & q!=null & x'=x & y'=y & x!=null.
expect Valid.

// (5) id: 9; line: 22; kind: PRE_REC
 checkentail_exact q::ll<> * x'::node<q>&v1'=q & v' & q!=null & x'=x & y'=y & x!=null
 |-  v1'::ll<> * x'::node<q>&v1'=q & v' & q!=null & x'=x & y'=y & x!=null & 
v1'!=null.
expect Valid.
 
// (6) id: 12; line: 22; kind: PRE_REC
 checkentail_exact q::ll<> * x'::node<q>&v1'=q & v' & q!=null & x'=x & y'=y & x!=null
 |-  v1'::ll<>&v1'!=null & y'=v1'.
expect Fail.
 
// (7) id: 14; line: 26; kind: BIND
 checkentail_exact q::ll<> * x'::node<q>&!(v') & q=null & x'=x & y'=y & x!=null
 |-  x'::node_e1<q> & !(v') & q=null & x'=x & y'=y & x!=null.
expect Valid.

// (8) id: 16; line: 16; kind: POST
 checkentail_exact x'::node<q> * q::lseg<y'>&v' & q!=null & x'=x & y'=y & x!=null
 |-  x::lseg_e1<y>&v' & q!=null & x'=x & y'=y & x!=null.
expect Valid.
 
// (9) id: 23; line: 16; kind: POST
 checkentail_exact q::ll<> * x'::node<y'>&next0=q & !(v') & q=null & x'=x & y'=y & x!=null
 |-  x::lseg_e1<y> * q::ll<>&next0=q & !(v') & q=null & x'=x & y'=y & x!=null.
expect Valid.

// (10) id: 31; line: 21; kind: BIND
 checkentail_exact x'::ll_e1<>&x'=x & y'=y & y=x & x!=null
 |-  x'::ll_e2<>& x'=x & y'=y & y=x & x!=null.
expect Valid.

// (11) id: 33; line: 21; kind: PRE
 checkentail_exact q::ll<> * x'::node<q>&v'=null & v'=q & x'=x & y'=y & y=x & x!=null
 |-  q::ll<> * x'::node<q>&v'=null & v'=q & x'=x & y'=y & y=x & x!=null.
expect Valid.
 
// (12) id: 35; line: 21; kind: PRE
 checkentail_exact q::ll<> * x'::node<q>&v'!=null & v'=q & x'=x & y'=y & y=x & x!=null
 |-  q::ll<> * x'::node<q>&v'!=null & v'=q & x'=x & y'=y & y=x & x!=null.
expect Valid.
 
// (13) id: 37; line: 22; kind: BIND
 checkentail_exact q::ll<> * x'::node<q>&v' & q!=null & x'=x & y'=y & y=x & x!=null
 |-  x'::node_e1<q> * q::ll<> & v' & q!=null & x'=x & y'=y & y=x & x!=null.
expect Valid.

// (14) id: 39; line: 22; kind: PRE_REC
 checkentail_exact q::ll<> * x'::node<q>&v1'=q & v' & q!=null & x'=x & y'=y & y=x & x!=null
 |-  v1'::ll<> * x'::node<q>&v1'=q & v' & q!=null & x'=x & y'=y & y=x & 
x!=null & v1'!=null.
expect Valid.
 
// (15) id: 42; line: 22; kind: PRE_REC
 checkentail_exact q::ll<> * x'::node<q>&v1'=q & v' & q!=null & x'=x & y'=y & y=x & x!=null
 |-  v1'::ll<>&v1'!=null & y'=v1'.
expect Fail.
 
// (16) id: 48; line: 26; kind: BIND
 checkentail_exact q::ll<> * x'::node<q>&!(v') & q=null & x'=x & y'=y & y=x & x!=null
 |-  x'::node_e1<q>& !(v') & q=null & x'=x & y'=y & y=x & x!=null.
expect Valid.

// (17) id: 50; line: 19; kind: POST
 checkentail_exact x'::node<q> * q::lseg<y'>&v' & q!=null & x'=x & y'=y & y=x & x!=null
 |-  x::clist<>&v' & q!=null & x'=x & y'=y & y=x & x!=null.
expect Valid.
 
// (18) id: 55; line: 19; kind: POST
 checkentail_exact q::ll<> * x'::node<y'>&next0=q & !(v') & q=null & x'=x & y'=y & y=x & 
x!=null
 |-  x::clist<> * q::ll<>&next0=q & !(v') & q=null & x'=x & y'=y & y=x & x!=null.
expect Valid.
