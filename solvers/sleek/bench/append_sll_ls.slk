data node {
  node next;
}.
 
pred ll<> == emp & self=null or
  (exists q_20: self::node<q_20> * q_20::ll<>)
  inv true.

pred lseg<p:node> == emp & self=p or
  (exists p_19,q_18: self::node<q_18> * q_18::lseg<p_19> & p_19=p)
  inv true.

pred ll_e1<> == (exists q: self::node<q> * q::ll<>).

pred ll_e2<> == (exists p,q: self::node<p> * q::ll<> & p=q).

pred node_e1<q> == (exists p: self::node<p> & p=q).

pred lseg_e1<p> == (exists q: self::lseg<p> & p=q).
 
// (1) id: 0; line: 16; kind: BIND
 checkentail_exact x'::ll_e1<>&x'=x & y'=y & x!=null
 |-  x'::ll_e2<> & x'=x & y'=y & x!=null.
expect Valid.

// (2) id: 2; line: 16; kind: PRE
 checkentail_exact q::ll<> * x'::node<q>&v'=null & v'=q & x'=x & y'=y & x!=null
 |-  q::ll<> * x'::node<q>&v'=null & v'=q & x'=x & y'=y & x!=null.
expect Valid.
 
// (3) id: 4; line: 16; kind: PRE
 checkentail_exact q::ll<> * x'::node<q>&v'!=null & v'=q & x'=x & y'=y & x!=null
 |-  q::ll<> * x'::node<q>&v'!=null & v'=q & x'=x & y'=y & x!=null.
expect Valid.
 
// (4) id: 6; line: 17; kind: BIND
 checkentail_exact q::ll<> * x'::node<q>&v' & q!=null & x'=x & y'=y & x!=null
 |-  x'::node_e1<q> * q::ll<>& v' & q!=null & x'=x & y'=y & x!=null.
expect Valid.
 
// (5) id: 8; line: 17; kind: PRE_REC
 checkentail_exact q::ll<> * x'::node<q>&v1'=q & v' & q!=null & x'=x & y'=y & x!=null
 |-  v1'::ll<> * x'::node<q>&v1'=q & v' & q!=null & x'=x & y'=y & x!=null & v1'!=null.
expect Valid.
 
// (6) id: 11; line: 21; kind: BIND
 checkentail_exact q::ll<> * x'::node<q>&!(v') & q=null & x'=x & y'=y & x!=null
 |-  x'::node_e1<q> * q::ll<> & !(v') & q=null & x'=x & y'=y & x!=null.
expect Valid.

// (7) id: 13; line: 13; kind: POST
 checkentail_exact x'::node<q> * q::lseg<y'>&v' & q!=null & x'=x & y'=y & x!=null
 |-  x::lseg_e1<y>&v' & q!=null & x'=x & y'=y & x!=null.
expect Valid.
 
// (8) id: 20; line: 13; kind: POST
 checkentail_exact q::ll<> * x'::node<y'>&next0=q & !(v') & q=null & x'=x & y'=y & x!=null
 |-  x::lseg_e1<y> * q::ll<>&next0=q & !(v') & q=null & x'=x & y'=y & x!=null.
expect Valid.
