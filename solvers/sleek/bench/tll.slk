data node {
  node parent;
  node left;
  node right;
  node next;
}.
 
pred tree<> == (exists p_35,D1_36,r_37,n_38: self::node<p_35,D1_36,r_37,n_38>&r_37=null) or
  (exists p_39,l_40,r_41,D2_42: self::node<p_39,l_40,r_41,D2_42> * l_40::tree<> * r_41::tree<>&r_41!=null)
  inv self!=null.

pred tll<p:node,ll:node,lr:node> == 
  (exists lr_28,p_21,D1_22,l_23: self::node<p_21,D1_22,l_23,lr_28>&l_23=null & self=ll & lr_28=lr) or
	(exists p_29,self_30,ll_31,self_32,z_33,lr_34,l_24,r_25,D2_26,z_27: self::node<p_29,l_24,r_25,D2_26> * 
  l_24::tll<self_30,ll_31,z_27> * r_25::tll<self_32,z_33,lr_34>&r_25!=null & 
  p_29=p & self_30=self & ll_31=ll & self_32=self & z_33=z_27 & lr_34=lr)
  inv self!=null.

pred right_nil<> == 
  (exists p,l,r,n: self::node<p,l,r,n> & r = null).

pred eright_nil<> == 
  (exists p0,l0,r0,n0,p1,l1,r1,n1: 
	  self::node<p0,l0,r0,n0> & p0=p1 & l0=l1 & r0=r1 & n0=n1 & r1 = null).
 
// (1) id: 2; line: 25; kind: BIND
checkentail_exact x'::right_nil<> & p'=p & x'=x & t'=t
 |- x'::right_nil<> & p'=p & x'=x & t'=t.
expect Valid.

pred right_nnil<> == 
  (exists p,l,r,n: self::node<p,l,r,n> * l::tree<> * r::tree<> & r != null).

pred eright_nnil<> == 
  (exists p0,l0,r0,n0,p1,l1,r1,n1: 
	  self::node<p0,l0,r0,n0> * l1::tree<> * r1::tree<> & 
		p0=p1 & l0=l1 & r0=r1 & n0=n1 & r1 = null).

// (2) id: 4; line: 25; kind: BIND
checkentail_exact x'::right_nil<> & p'=p & x'=x & t'=t
 |- x'::right_nil<> & p'=p & x'=x & t'=t.
expect Valid.

pred enode<p,l,r,n> == (exists p0,l0,r0,n0: 
  self::node<p0,l0,r0,n0> & p0=p & l0=l & r0=r & n0=n).

// (3) id: 6; line: 26; kind: BIND
 checkentail_exact x'::node<p',D,r,n>&parent0=p & p'=p1 & x'=x & t'=t & r=null
 |-  x'::enode<p',D,r,n> & parent0=p & p'=p1 & x'=x & t'=t & r=null.
expect Valid.

// (4) id: 8; line: 26; kind: BIND
 checkentail_exact l::tree<> * r::tree<> * x'::node<p',l,r,D>&parent0=p & p'=p1 & x'=x & 
t'=t & r!=null
 |-  x'::enode<p',l,r,D> * l::tree<> * r::tree<>& parent0=p & p'=p1 & x'=x & t'=t & r!=null.
expect Valid.

// (5) id: 10; line: 26; kind: PRE
 checkentail_exact x'::node<p',D,r,n>&v'=null & v'=r & parent0=p & p'=p1 & x'=x & t'=t & r=null
 |-  x'::node<p',D,r,n>&v'=null & v'=r & parent0=p & p'=p1 & x'=x & t'=t & r=null.
expect Valid.
 
// (6) id: 12; line: 26; kind: PRE
 checkentail_exact l::tree<> * r::tree<> * x'::node<p',l,r,D>&v'!=null & v'=r & parent0=p & 
p'=p1 & x'=x & t'=t & r!=null
 |-  l::tree<> * r::tree<> * x'::node<p',l,r,D>&v'!=null & v'=r & parent0=p & 
p'=p1 & x'=x & t'=t & r!=null.
expect Valid.
 
// (7) id: 14; line: 28; kind: BIND
 checkentail_exact x'::node<p',D,r,n>&v' & r=null & parent0=p & p'=p1 & x'=x & t'=t
 |-  x'::enode<p',D,r,n>& v' & r=null & parent0=p & p'=p1 & x'=x & t'=t.
expect Valid.
 
// (8) id: 16; line: 33; kind: BIND
 checkentail_exact l::tree<> * r::tree<> * x'::node<p',l,r,D>&!(v') & r!=null & parent0=p & 
p'=p1 & x'=x & t'=t
 |-  x'::enode<p',l,r,D> * l::tree<> * r::tree<>& !(v') & r!=null & parent0=p & p'=p1 & x'=x & t'=t.
expect Valid.
 
// (9) id: 18; line: 33; kind: PRE_REC
 checkentail_exact l::tree<> * r::tree<> * x'::node<p',l,r,D>&v'=r & !(v1') & r!=null & 
parent0=p & p'=p1 & x'=x & t'=t
 |-  l::tree<> * v'::tree<> * x'::node<p',l,r,D>&v'=r & !(v1') & r!=null & 
parent0=p & p'=p1 & x'=x & t'=t.
expect Valid.
 
// (10) id: 21; line: 34; kind: BIND
 checkentail_exact l::tree<> * x'::node<p',l,r,D> * r::tll<x',l',t'>&r!=null & !(v') & 
parent0=p & p'=p1 & x'=x & t'=t
 |-  x'::node<p',l,r,D> * l::tree<> * r::tll<x',l',t'>& r!=null & !(v') & parent0=p & p'=p1 & x'=x & t'=t.
expect Valid.
 
// (11) id: 23; line: 34; kind: PRE_REC
 checkentail_exact l::tree<> * r::tll<x',l',t'> * x'::node<p',l,r,D>&v'=l & r!=null & !(v1') & 
parent0=p & p'=p1 & x'=x & t'=t
 |-  v'::tree<> * r::tll<x',l',t'> * x'::node<p',l,r,D>&v'=l & r!=null & 
!(v1') & parent0=p & p'=p1 & x'=x & t'=t.
expect Valid.

pred etll<p,t,r> == (exists p1,t1: self::tll<p1,r,t1> & p1=p & t1=t).

// (12) id: 26; line: 23; kind: POST
 checkentail_exact x'::node<p',D,r,t'>&res=x' & next0=n & v' & r=null & parent0=p & p'=p1 & 
x'=x & t'=t
 |-  x::etll<p1,t,res>& x=res & res=x' & next0=n & v' & r=null & parent0=p & p'=p1 & x'=x & t'=t.
expect Valid.

pred ltll<p,l,r,D,v,t> == 
  (exists l1: self::node<p,l,r,D> * l::tll<self,v,l1> * r::tll<self,l1,t>).

// (13) id: 32; line: 23; kind: POST
 checkentail_exact x'::ltll<p',l,r,D,v',t'>&
res=v' & l!=null & r!=null & !(v1') & parent0=p & p'=p1 & x'=x & t'=t
 |-  x::etll<p1,t,res>& v'=res & l!=null & r!=null & !(v1') & parent0=p & 
p'=p1 & x'=x & t'=t.
expect Valid.

