data node {
  node next;
}.

pred ll<> == emp & self=null or
  (exists q_18: self::node<q_18> * q_18::ll<>)
  inv true.

pred ll_e1<> == (exists q: self::node<q> * q::ll<>).

pred ll_e2<> == (exists p,q: self::node<p> * q::ll<> & p=q).

pred node_e1<q> == (exists p: self::node<p> & p=q).
 
// (1) id: 0; line: 13; kind: BIND
 checkentail_exact x'::ll_e1<> * y::ll<>&x'=x & y'=y & x!=null
 |-  x'::ll_e2<> * y::ll<>& x'=x & y'=y & x!=null.
expect Valid.

// (2) id: 2; line: 13; kind: PRE
 checkentail_exact q::ll<> * y::ll<> * x'::node<q>&v'=null & v'=q & x'=x & y'=y & x!=null
 |-  q::ll<> * y::ll<> * x'::node<q>&v'=null & v'=q & x'=x & y'=y & x!=null.
expect Valid.
 
// (3) id: 4; line: 13; kind: PRE
 checkentail_exact q::ll<> * y::ll<> * x'::node<q>&v'!=null & v'=q & x'=x & y'=y & x!=null
 |-  q::ll<> * y::ll<> * x'::node<q>&v'!=null & v'=q & x'=x & y'=y & x!=null.
expect Valid.

// (4) id: 6; line: 14; kind: BIND
 checkentail_exact q::ll<> * y::ll<> * x'::node<q>&v' & q!=null & x'=x & y'=y & x!=null
 |-  x'::node_e1<q> * q::ll<> * y::ll<>& v' & q!=null & x'=x & y'=y & x!=null.
expect Valid.

// (5) id: 8; line: 14; kind: PRE_REC
 checkentail_exact q::ll<> * y::ll<> * x'::node<q>&v1'=q & v' & q!=null & x'=x & y'=y & x!=null
 |-  v1'::ll<> * y'::ll<> * x'::node<q>&v1'=q & v' & q!=null & x'=x & y'=y & x!=null & v1'!=null.
expect Valid.
 
// (6) id: 12; line: 18; kind: BIND
 checkentail_exact q::ll<> * y::ll<> * x'::node<q>&!(v') & q=null & x'=x & y'=y & x!=null
 |-  x'::node_e1<q> * q::ll<> * y::ll<>&!(v') & q=null & x'=x & y'=y & x!=null.
expect Valid.

// (7) id: 14; line: 10; kind: POST
 checkentail_exact x'::node<q> * q::ll<>&v' & q!=null & x'=x & y'=y & x!=null
 |-  x::ll<>&v' & q!=null & x'=x & y'=y & x!=null.
expect Valid.
 
// (8) id: 19; line: 10; kind: POST
 checkentail_exact q::ll<> * y::ll<> * x'::node<y'>&next0=q & !(v') & q=null & x'=x & y'=y & x!=null
 |-  x::ll<> * q::ll<>&next0=q & !(v') & q=null & x'=x & y'=y & x!=null.
expect Valid.
